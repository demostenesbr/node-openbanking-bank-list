generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organisation {
  OrganisationId              String               @id @default(uuid())
  OrganisationName            String
  CreatedOn                   DateTime             @default(now())
  LegalEntityName             String
  CountryOfRegistration       String
  CompanyRegister             String
  Tag                         String[]
  Size                        String
  RegistrationNumber          String
  RegistrationId              String
  RegisteredName              String
  AddressLine1                String
  AddressLine2                String
  City                        String
  Postcode                    String
  Country                     String
  ParentOrganisationReference String
  Status                      OrganisationStatus   @default(ACTIVE)
  AuthorisationServers        AuthorisationServer?
  OrgDomainClaims             OrgDomainClaim?
  OrgDomainRoleClaims         OrgDomainRoleClaim?
}

model AuthorisationServer {
  AuthorisationServerId               String       @id @default(uuid())
  AutoRegistrationSupported           Boolean
  AutoRegistrationNotificationWebhook String
  SupportsCiba                        Boolean
  SupportsDCR                         Boolean
  SupportsRedirect                    Boolean
  AuthorisationServerCertifications   String[]
  CustomerFriendlyDescription         String
  CustomerFriendlyLogoUri             String
  CustomerFriendlyName                String
  DeveloperPortalUri                  String
  TermsOfServiceUri                   String
  NotificationWebhookAddedDate        String
  OpenIDDiscoveryDocument             String
  Issuer                              String
  PayloadSigningCertLocationUri       String
  ParentAuthorisationServerId         String
  DeprecatedDate                      String
  RetirementDate                      String
  SupersededByAuthorisationServerId   String
  ApiResources                        APIResource?
  Organisation                        Organisation @relation(fields: [AuthorisationServerId], references: [OrganisationId])
}

model APIResource {
  ApiResourceId               String                @id @default(uuid())
  ApiVersion                  String
  FamilyComplete              Boolean
  ApiCertificationUri         String
  CertificationStatus         String
  CertificationStartDate      String
  CertificationExpirationDate String
  ApiFamilyType               String
  ApiDiscoveryEndpoints       APIDiscoveryEndpoint?
  AuthorisationServer         AuthorisationServer   @relation(fields: [ApiResourceId], references: [AuthorisationServerId])
}

model APIDiscoveryEndpoint {
  ApiDiscoveryId String      @id @default(uuid())
  ApiEndpoint    String
  APIResource    APIResource @relation(fields: [ApiDiscoveryId], references: [ApiResourceId])
}

model OrgDomainClaim {
  AuthorisationDomainName String
  AuthorityName           String
  RegistrationId          String               @id @default(uuid())
  Status                  OrgDomainClaimStatus @default(ACTIVE)
  Organisation            Organisation         @relation(fields: [RegistrationId], references: [OrganisationId])
}

model OrgDomainRoleClaim {
  AuthorisationDomain String
  Role                String
  Authorisations      String[]
  RegistrationId      String                   @id @default(uuid())
  Status              OrgDomainRoleClaimStatus @default(ACTIVE)
  Organisation        Organisation             @relation(fields: [RegistrationId], references: [OrganisationId])
}

enum OrganisationStatus {
  ACTIVE
  IN_PROGRESS
  DONE
}

enum OrgDomainClaimStatus {
  ACTIVE
  IN_PROGRESS
  DONE
}

enum OrgDomainRoleClaimStatus {
  ACTIVE
  IN_PROGRESS
  DONE
}
